#!/usr/bin/env python3
# TODO: replace stderr with "import logging"
from bs4 import BeautifulSoup
from os import environ
from sys import stderr
from time import sleep
import feedparser
import requests
import telegram

class CONFIG:
    class phoronix:
        link = "https://www.phoronix.com/rss.php"
        chat_id = "CHAT_ID_PHORONIX"
        save_file = "phoronix"
        title = ""

    class cs_blog:
        link = "https://blog.counter-strike.net/index.php/feed/"
        chat_id = "CHAT_ID_CS"
        save_file = "cs-blog"
        title = "#CS_Blog"

    class cs_updates:
        link = "https://blog.counter-strike.net/index.php/category/updates/"
        chat_id = "CHAT_ID_CS"
        save_file = "cs-updates"
        title = "#CS_Updates"

def get_last_unread(save_file: str) -> str:
    try: 
        with open(f"last-read/{save_file}", "r") as last_read_file:
            return last_read_file.read().strip()
    except FileNotFoundError:
        pass

    return ""

def save_last_unread(save_file: str, id: str) -> None:
    with open(f"last-read/{save_file}", "w") as last_read_file:
        last_read_file.write(id)

def get_unread_rss_feed(url: str, save_file: str) -> list:
    feed = feedparser.parse(url) 
    last_read_id = get_last_unread(save_file)

    feed_unread = []
    if last_read_id:
        for item in feed.entries:
            if item.id == last_read_id:
                break
            feed_unread.append(item)
    else:
        feed_unread = feed.entries
    
    feed_unread.reverse()
    return feed_unread

def get_unread_cs_updates() -> list:
    cs_updates_changelog = "https://blog.counter-strike.net/index.php/category/updates/"

    soup = BeautifulSoup(requests.get(cs_updates_changelog).text, "html.parser")
    last_read_id = get_last_unread(CONFIG.cs_updates.save_file)
    feed = []
    for update_html in soup.find(id="post_container").find_all("div", {"class": "inner_post"}):
        link = update_html.h2.a.get("href")

        if link == last_read_id:
            break

        title = update_html.h2.a.string

        description_list = update_html("p")
        description = ""
        for item in description_list:
            if item.get("class") == ["post_date"]:
                continue

            description += item.text 
            description += "\n\n"

        article = {
                "title": title,
                "description": description,
                "link": link,
                "id": link
                }
        feed.append(article)

    feed.reverse()
    return feed

# return read/sent sent id
def update(feed: list, chat_id: str, topic: str = "", disable_web_page_preview: bool = True) -> str:
    token = environ["TOKEN"]
    chat_id = environ[chat_id]
    
    bot = telegram.Bot(token)
    counter = 0
    if topic:
        topic += "\n\n"
    for article in feed:
        # telegram doesn't allow sending more than 20 messages per minute to the same chat
        if counter >= 20:
            counter = 0
            sleep(90)

        bot.send_message(chat_id, f"{topic}<a href=\"{article['link']}\">{article['title']}</a>\n{article['description']}", parse_mode="HTML", disable_web_page_preview=disable_web_page_preview)
        counter += 1
        sleep(1)

    return feed[-1]["id"]

if __name__ == "__main__":
    items = (
            ( get_unread_rss_feed(CONFIG.phoronix.link, CONFIG.phoronix.save_file), CONFIG.phoronix ),
            ( get_unread_rss_feed(CONFIG.cs_blog.link, CONFIG.cs_blog.save_file), CONFIG.cs_blog ),
            ( get_unread_cs_updates(), CONFIG.cs_updates )
            )
    for item in items:
        feed = item[0]
        config = item[1]
        if feed:
            last_read = update(feed, config.chat_id, config.title)
            save_last_unread(config.save_file, last_read)
